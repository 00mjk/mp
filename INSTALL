This file describes how to build and install the MP library, function
libraries and solver drivers.

In the following instructions ${MP_DIR} denotes a local copy of the
MP repository which can be downloaded from https://github.com/ampl/mp/
or using Git:

  git clone git://github.com/ampl/mp.git

An included CMake build script (CMakeLists.txt) can be used to build
MP on a wide range of platforms. You can download CMake for free
from http://www.cmake.org/cmake/resources/software.html.

CMake works by generating native makefiles or build projects that can
be used in the compiler environment of your choice. The typical
workflow starts with:

  mkdir mybuild    # Create a directory to hold the build output.
  cd mybuild
  cmake ${MP_DIR}  # Generate native build scripts.

If you are on a *nix system, you should now see a Makefile in the
current directory. Now you can build MP by running "make".

Once MP has been built you can invoke "make test" to run the tests.

If you use Windows and have Vistual Studio installed, an MP.sln file
and several .vcproj files will be created. You can then build them
using Visual Studio.

On Mac OS X with Xcode installed, a .xcodeproj file will be generated.

Optional packages
-----------------

* To build the amplgsl library you should have the source code for GSL with
  CMake build support in ${MP_DIR}/solvers/amplgsl/gsl. This version of
  GSL is avaialble for download from https://github.com/ampl/gsl.
  You can retrieve MP and GSL sources at the same time using the command

    git clone --recursive git://github.com/ampl/mp.git

* To build gecode, the AMPL driver for Gecode constraint programming solver,
  you should have Gecode source code in ${AMPL_DIR}/solvers/gecode/lib.
  You can retrieve MP and Gecode sources at the same time using the command

    git clone --recursive git://github.com/ampl/mp.git

* To build ilogcp, the AMPL driver for IBM ILOG Constraint Programming
  (CP) Optimizer, you should have IBM ILOG CP Optimizer, CPLEX and Concert
  installed. Normally these are installed as parts of IBM ILOG CPLEX
  Optimization Studio. The code has been tested with Optimization Studio
  version 12.4.


Using Eclipse CDT
-----------------

You can generate Eclipse CDT project files with CMake:

  cmake -G "Eclipse CDT 4 -  Unix Makefiles"

To get rid of semantic errors reported by Indexer add preprocessor symbols
"_GLIBCPP_USE_NAMESPACES", "__GXX_EXPERIMENTAL_CXX0X__" and "STAND_ALONE"
in "Project Properties" / "C/C++ Include Files and Symbols" and rebuild
the index.

Using Windows SDK
-----------------

If you want to build MP with the Windows SDK toolchain, use a helper
script cmake/run-cmake.bat instead of running CMake directly. This script
configures build environment and runs CMake forwarding all command-line
arguments to it, for example:

  support\cmake\run-cmake -G "Visual Studio 10 Win64" .
